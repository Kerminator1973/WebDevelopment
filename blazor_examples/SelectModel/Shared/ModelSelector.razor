@using Microsoft.Fast.Components.FluentUI
@inject HttpClient Http

@* Определяем выпадающие списки *@
<SelectorList DefaultItem="Выберите страну..." SelectEvent=onSelectModel @ref=deviceSelector />
<SelectorList DefaultItem="Выберите страну..." SelectEvent=onSelectCountry @ref=countrySelector />
<SelectorList DefaultItem="Выберите исполнение..." @ref=versionSelector />

<FluentButton Appearance="@Appearance.Accent" @onclick=OnReset>Reset</FluentButton>

@code {

    // Данные импортированные из файла "data.json"
    Dictionary<string, Dictionary<string, Dictionary<string, string>>>? Data;

    protected override async Task OnInitializedAsync()
    {
        // Загружаем описание моделей с сервера
        Data = await Http.GetFromJsonAsync<Dictionary<string, Dictionary<string, Dictionary<string, string>>>>("data.json");

        ReloadDevice();
    }

    private void OnReset()
    {
        // Возвращаем компонент в начальное состояние - загружаем данными только
        // первый список, а остальные списки сбрасываем в "значение по умолчанию"
        countrySelector?.ClearToDefault();
        versionSelector?.ClearToDefault();

        ReloadDevice();
    }

    // Ссылки на изменяемые в коде дочерние компоненты
    private SelectorList? deviceSelector;
    private SelectorList? countrySelector;
    private SelectorList? versionSelector;

    // Информация о последнем выбранном устройстве/модели нужна для
    // загрузки списка исполнений прибора, который зависит от модели
    // и выбранной страны
    private string? lastSelectedDevice;

    private void ReloadDevice()
    {
        if (Data != null)
        {
            List<Option<string>> list = new();
            list.Add(new Option<string> { Value = "none", Text = deviceSelector?.DefaultItem });

            foreach (var name in Data.Keys)
            {
                list.Add(new Option<string> { Value = name, Text = name });
            }
            deviceSelector?.ReplaceItems(list);
        }
    }

    private void ReloadCountries(string model)
    {
        Console.WriteLine($"ReloadCountries {model}");

        if (Data != null)
        {

            List<Option<string>> list = new();
            list.Add(new Option<string> { Value = "none", Text = countrySelector?.DefaultItem });

            var keys = Data[model].Keys;
            foreach (var name in keys)
            {
                list.Add(new Option<string> { Value = name, Text = name });
            }

            countrySelector?.ReplaceItems(list);
            versionSelector?.ClearToDefault();
        }
    }

    private void ReloadVersions(string country)
    {
        Console.WriteLine($"ReloadVersions {country}");

        if (Data != null && lastSelectedDevice != null)
        {
            List<Option<string>> list = new();
            list.Add(new Option<string> { Value = "none", Text = versionSelector?.DefaultItem });

            var keys = Data[lastSelectedDevice][country].Keys;
            foreach (var id in keys)
            {
                var title = Data[lastSelectedDevice][country][id];
                list.Add(new Option<string> { Value = id, Text = title });
            }
            versionSelector?.ReplaceItems(list);

            // TODO: нужно проверять, сколько элементов в списке. Если он только один,
            // то автоматически выбирать его, поскольку FluentSelect не пришлёт обновление
            // при выборе элемента и эту проблему нужно обходить
        }
    }

    // Обработчики события дочерних компонентов
    private void onSelectModel(string model)
    {
        Console.WriteLine($"Selected model: {model}"); // Отладочный вывод

        if (model == "none")
        {
            return;
        }

        // Запоминимаем выбранную модель прибора, она используется
        // в реализации метода ReloadVersions()
        lastSelectedDevice = model;

        ReloadCountries(model);
    }

    private void onSelectCountry(string country)
    {
        ReloadVersions(country);
    }
}
