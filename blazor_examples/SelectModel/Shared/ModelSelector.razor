@using Microsoft.Fast.Components.FluentUI
@inject HttpClient Http

<h2>ModelSelector</h2>

@* Определяем выпадающие списки *@
<SelectorList DefaultItem="Загрузка..." SelectEvent="onSelectModel" @ref="deviceSelector" />
<SelectorList DefaultItem="Выберите модель" SelectEvent="onSelectCountry" @ref="countrySelector" />
<SelectorList DefaultItem="Выберите страну" @ref="versionSelector" />

<FluentButton Appearance="@Appearance.Accent">Reset</FluentButton>

@code {

    // Данные импортированные из файла "data.json"
    Dictionary<string, Dictionary<string, Dictionary<string, string>>>? Data;

    protected override async Task OnInitializedAsync()
    {
        // Загружаем описание моделей с сервера
        Data = await Http.GetFromJsonAsync<Dictionary<string, Dictionary<string, Dictionary<string, string>>>>("data.json");

        ReloadDevice();
    }

    private SelectorList? deviceSelector;
    private SelectorList? countrySelector;
    private SelectorList? versionSelector;

    private string? lastSelectedDevice;

    private void ReloadDevice()
    {
        if (Data != null)
        {
            List<Option<string>> list = new();
            foreach (var name in Data.Keys)
            {
                list.Add(new Option<string> { Value = name, Text = name });
            }
            deviceSelector?.ReplaceItems(list);
        }
    }

    private void ReloadCountries(string model)
    {
        if (Data != null)
        {
            List<Option<string>> list = new();
            foreach (var name in Data[model].Keys)
            {
                list.Add(new Option<string> { Value = name, Text = name });
            }
            countrySelector?.ReplaceItems(list);
        }
    }

    private void ReloadVersions(string country)
    {
        if (Data != null && lastSelectedDevice != null)
        {
            List<Option<string>> list = new();
            foreach (var id in Data[lastSelectedDevice][country].Keys)
            {
                var title = Data[lastSelectedDevice][country][id];
                list.Add(new Option<string> { Value = id, Text = title });
            }
            versionSelector?.ReplaceItems(list);
        }
    }

    private void onSelectModel(string model)
    {
        Console.WriteLine($"Selected model: {model}"); // Отладочный вывод

        lastSelectedDevice = model;

        ReloadCountries(model);

        countrySelector?.SetFocus();
    }

    private void onSelectCountry(string country)
    {
        ReloadVersions(country);

        versionSelector?.SetFocus();
    }
}
