@inject IJSRuntime JSRuntime

<select id="@GenerateId()" @onchange="OnSelectionChanged">
    @if (Items != null) {
        @foreach (var item in Items)
        {
            <option value="@item">@item</option>
        }
    }
</select>

<script>
    // Функция устанавливает фокус на указанный орган управления и раскрывает 
    // выпадающий список
    function setFocusOnChildInput(id) {
        const dropdown = document.getElementById(id);
        dropdown.focus();
    }
</script>

@code {
    // Текстовое сообщение, отображаемое в списке выбора, если список пустой
    [Parameter]
    public string? DefaultItem { get; set; }

    // Список отображаемых в списке элементов
    [Parameter]
    public List<string> Items { get; set; } = new();

    // Событие - выбран элемент списка
    [Parameter]
    public EventCallback<string> SelectEvent { get; set; }

    // Сгенерированный при вызове GenerateId() уникальный идентификатор списка (select)
    private string selectId = String.Empty;

    protected override void OnInitialized()
    {
        // После того, как орган управления создан, если не был указан список
        // добавляемых элементов, отображаем единственный доступный элемент
        if (!String.IsNullOrEmpty(DefaultItem) && Items.Count == 0)
        {
            Items.Add(DefaultItem);
        }
    }

    public void SetFocus()
    {
        JSRuntime.InvokeVoidAsync("setFocusOnChildInput", selectId).GetAwaiter().GetResult();
    }

    private string GenerateId()
    {
        selectId = $"{Guid.NewGuid()}";
        return selectId;
    }

    private void OnSelectionChanged(ChangeEventArgs e)
    {
        // Передаём родительскому элементу информацию о выбранном элементе списка
        if (e?.Value != null) {
            SelectEvent.InvokeAsync(e.Value.ToString());
        }
    }

    public void ReplaceItems(List<string> newItems)
    {
        Items.Clear();
        Items.AddRange(newItems);
        StateHasChanged();
    }
}
