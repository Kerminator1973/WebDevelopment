@using Microsoft.Fast.Components.FluentUI

<FluentSelect Items=@Items
            OptionText="@(i => i.Text)"
            OptionValue="@(i => i.Value)"
            SelectedOption="@SelectItem"
            @bind-Open=isOpen
            @onchange=OnSelectionChanged />
@code {
    // Текстовое сообщение, отображаемое в списке выбора, если список пустой
    [Parameter]
    public string? DefaultItem { get; set; }

    // Список отображаемых в списке элементов
    [Parameter]
    public List<Option<string>> Items { get; set; } = new();

    // Событие (callback) - выбран элемент списка
    [Parameter]
    public EventCallback<string> SelectEvent { get; set; }

    // Через этот атрибут класса осуществляется связывание (binding) со свойством "Open"
    // компонента FluentSelect. При изменении isOpen будет изменяться и "Open"
    private bool isOpen = false;

    private Option<string>? SelectItem { get; set; }

    protected override void OnInitialized()
    {
        // После того, как орган управления создан, если не был указан список
        // добавляемых элементов, отображаем единственный доступный элемент
        if (!String.IsNullOrEmpty(DefaultItem) && Items.Count == 0)
        {
            ClearToDefault();
        }
    }

    public void ClearToDefault()
    {
        Items = new();
        Items.Add(new Option<string> { Value = "0", Text = DefaultItem });
        SelectItem = Items[0];
        StateHasChanged();
    }

    public void ReplaceItems(List<Option<string>> newItems)
    {
        Items = newItems;
        SelectItem = newItems[0];
        StateHasChanged();
    }

    public void OpenDropDownList()
    {
        isOpen = true;
    }

    private void OnSelectionChanged(ChangeEventArgs e)
    {
        // Передаём родительскому элементу информацию о выбранном элементе списка
        if (e?.Value != null)
        {
            var selection = e.Value.ToString();
            if (selection != DefaultItem)
            {
                Console.WriteLine($"{selection}");
                SelectEvent.InvokeAsync(selection);
            }
        }
    }
}
